{
	"version": "2.0.0",
	"options": {
	  "cwd": "${workspaceFolder}",
	  "env": {
		"MSYSTEM": "MINGW64",
		"CHERE_INVOKING": "1",
		"RACK_DIR": "${env:RACK_SDK}",
		"RACK_SDK": "${env:RACK_SDK}",
		"RACK_USER_DIR": "${env:RACK_USER_DIR}"
	  },
	  "shell": {
		"executable": "C:\\msys64\\usr\\bin\\bash.exe",
		"args": ["-lc"]
	  }
	},
	"tasks": [
	  {
		"label": "Build",
		"type": "shell",
		"command": "make",
		"args": ["-j$(nproc)"],
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"detail": "Build plugin with MSYS2 MinGW-w64 toolchain"
	  },
	  {
		"label": "Install",
		"type": "shell",
		"command": "make",
		"args": ["install"],
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"detail": "Install to $RACK_USER_DIR/plugins"
	  },
	  {
		"label": "Clean",
		"type": "shell",
		"command": "make",
		"args": ["clean"],
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"detail": "Remove build artifacts"
	  },
	  {
		"label": "Generate module.cpp from SVG",
		"type": "shell",
		"command": "python3 \"$RACK_SDK/helper.py\" createmodule ${input:ModuleName} res/${input:ModuleName}.svg src/${input:ModuleName}.cpp",
		"options": { "cwd": "${workspaceFolder}" },
		"detail": "Generate src/<name>.cpp from res/<name>.svg"
	  },
	  {
		"label": "Build & Install",
		"dependsOn": ["Build", "Install"],
		"dependsOrder": "sequence",
		"group": { "kind": "build" },
		"detail": "Build then install"
	  },
	  {
		"label": "Clean → Build & Install",
		"dependsOn": ["Clean", "Build", "Install"],
		"dependsOrder": "sequence",
		"group": { "kind": "build", "isDefault": true },
		"detail": "Clean, compile, then install"
	  },
	  {
		"label": "Generate → Build & Install",
		"dependsOn": ["Generate module.cpp from SVG", "Build & Install"],
		"dependsOrder": "sequence",
		"detail": "Create module.cpp, build, install"
	  },
	  {
		"label": "Git: Commit + Push (prompt)",
		"type": "shell",
		"command": "git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo 'Not a git repo'; exit 1; }; MSG='${input:commitMsg}'; if [ -z \"$MSG\" ]; then MSG=\"chore: save $(date -u +%Y-%m-%dT%H:%M:%SZ)\"; fi; if git diff --quiet && git diff --cached --quiet; then echo 'No changes to commit'; else git add -A && git commit -m \"$MSG\"; fi; git push -u origin main",
		"problemMatcher": []
	  },
	  {
		"label": "Git: Quick Commit + Push",
		"type": "shell",
		"command": "git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo 'Not a git repo'; exit 1; }; MSG=\"chore: save $(date -u +%Y-%m-%dT%H:%M:%SZ)\"; if git diff --quiet && git diff --cached --quiet; then echo 'No changes to commit'; else git add -A && git commit -m \"$MSG\"; fi; git push -u origin main",
		"problemMatcher": []
	  },
	  {
		"label": "Build (core tests)",
		"type": "shell",
		"group": "build",
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"command": "mkdir -p build && g++ -std=c++17 -O2 -Wall -DUNIT_TESTS src/core/Strum.cpp src/core/PolyQuantaCore.cpp src/core/ScaleDefs.cpp tests/main.cpp -Isrc -o build/core_tests && ./build/core_tests",
		"detail": "Headless build + run of core unit tests (explicit Strum.cpp first)."
	  },
	  {
		"label": "Build (make quick)",
		"type": "shell",
		"command": "make",
		"args": ["quick"],
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"detail": "Alias: parallel build via make quick"
	  },
	  {
		"label": "Core tests (make)",
		"type": "shell",
		"command": "make",
		"args": ["core_tests"],
		"group": "build",
		"problemMatcher": {
		  "owner": "cpp",
		  "fileLocation": ["relative", "${workspaceFolder}"],
		  "pattern": [
			{
			  "regexp": "^(.*?):(\\d+):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5
			},
			{
			  "regexp": "^(.*?):(\\d+):\\s+(warning|error|note):\\s+(.*)$",
			  "file": 1, "line": 2, "severity": 3, "message": 4
			}
		  ]
		},
		"detail": "Alias: make core_tests (build + run)"
	  }
	],
	"inputs": [
	  {
		"id": "ModuleName",
		"type": "promptString",
		"description": "Module name (expects res/<name>.svg)",
		"default": "TestModule"
	  },
	  {
		"id": "commitMsg",
		"type": "promptString",
		"description": "Commit message (blank → auto timestamp)",
		"default": ""
	  }
	]
  }
  